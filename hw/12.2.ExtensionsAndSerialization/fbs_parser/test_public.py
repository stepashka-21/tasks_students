import subprocess
import sys
import typing as tp
from dataclasses import dataclass
from pathlib import Path

import pytest

EdgeT = tp.Dict[str, tp.Any]


@dataclass
class LoadTestCase:
    graph_str: str
    graph_fb: bytes


@dataclass
class DumpTestCase:
    vertex_names: tp.Dict[int, str]
    edges: tp.Dict[int, tp.List[EdgeT]]
    graph_fb: bytes


LOAD_TEST_CASES = [
    LoadTestCase(
        graph_str='{"V": {1: "A", 3: "B", 4: "C"}, "E": {1: [(1->3, c=1.5, a=True)], '
        '3: [(3->4, c=0.0, a=False)], 4: []}}',
        graph_fb=b'\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04'
        b'\x00\x00\x00\x03\x00\x00\x00\\\x00\x00\x00$\x00\x00\x00\x04\x00\x00\x00\xba\xff'
        b'\xff\xff\x0c\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00'
        b'\x00\x00C\x00\x00\x00\xd6\xff\xff\xff\x0c\x00\x00\x00\x1c\x00\x00\x00\x03\x00\x00'
        b'\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x01\x00\x00\x00B\x00\n\x00\x10\x00\x0c\x00\x08\x00\x04\x00\n\x00\x00\x00\x0c'
        b'\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03'
        b'\x00\x00\x00\x00\x00\xc0?\x01\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00'
    ),
    LoadTestCase(
        graph_str='{"V": {1: "A", 2: "A", 3: "B"}, "E": '
        '{1: [(1->2, c=0.0, a=True), (1->3, c=1.0, a=False)], '
        '2: [(2->1, c=0.0, a=True), (2->3, c=2.0, a=False)], 3: []}}',
        graph_fb=b'\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04\x00'
        b'\x00\x00\x03\x00\x00\x00l\x00\x00\x00$\x00\x00\x00\x04\x00\x00\x00\xaa\xff\xff\xff'
        b'\x0c\x00\x00\x00\x0c\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00B'
        b'\x00\x00\x00\xc6\xff\xff\xff\x0c\x00\x00\x00,\x00\x00\x00\x02\x00\x00\x00\x02\x00'
        b'\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00'
        b'\x00\x00\x03\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00A\x00\n\x00'
        b'\x10\x00\x0c\x00\x08\x00\x04\x00\n\x00\x00\x00\x0c\x00\x00\x00,\x00\x00\x00\x01\x00'
        b'\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00'
        b'\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x01\x00\x00'
        b'\x00A\x00\x00\x00'
    ),
    LoadTestCase(
        graph_str='{"V": {-40: "D", -20: "B", 10: "A", 30: "C"}, "E": '
        '{-40: [(-40->-20, c=0.0, a=False)], -20: [(-20->30, c=0.0, a=True)], '
        '10: [(10->-20, c=1.0, a=False), (10->30, c=0.0, a=False), (10->-40, c=1.0, a=True)], '
        '30: [(30->-40, c=1.0, a=False)]}}',
        graph_fb=b'\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04\x00'
        b'\x00\x00\x04\x00\x00\x00\xbc\x00\x00\x00\x84\x00\x00\x004\x00\x00\x00\x04\x00\x00'
        b'\x00^\xff\xff\xff\x0c\x00\x00\x00\x1c\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00'
        b'\x1e\x00\x00\x00\xd8\xff\xff\xff\x00\x00\x80?\x00\x00\x00\x00\x01\x00\x00\x00C\x00'
        b'\x00\x00\x8a\xff\xff\xff\x0c\x00\x00\x00<\x00\x00\x00\n\x00\x00\x00\x03\x00\x00'
        b'\x00\n\x00\x00\x00\xec\xff\xff\xff\x00\x00\x80?\x00\x00\x00\x00\n\x00\x00\x00\x1e'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\xd8\xff\xff\xff\x00\x00'
        b'\x80?\x01\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00\xd6\xff\xff\xff\x0c\x00\x00\x00'
        b'\x1c\x00\x00\x00\xec\xff\xff\xff\x01\x00\x00\x00\xec\xff\xff\xff\x1e\x00\x00\x00'
        b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00B\x00\n\x00\x10\x00\x0c\x00\x08\x00'
        b'\x04\x00\n\x00\x00\x00\x0c\x00\x00\x00\x1c\x00\x00\x00\xd8\xff\xff\xff\x01\x00\x00'
        b'\x00\xd8\xff\xff\xff\xec\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
        b'\x00D\x00\x00\x00'
    )
]

DUMP_TEST_CASES = [
    DumpTestCase(
        vertex_names={1: 'A', 3: 'B', 4: 'C'},
        edges={
            1: [{'from_id': 1, 'to_id': 3, 'cost': 1.5, 'accessible': True}],
            3: [{'from_id': 3, 'to_id': 4, 'cost': 0.0, 'accessible': False}],
            4: []
        },
        graph_fb=b'\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04'
        b'\x00\x00\x00\x03\x00\x00\x00\\\x00\x00\x00$\x00\x00\x00\x04\x00\x00\x00\xba\xff'
        b'\xff\xff\x0c\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00'
        b'\x00\x00C\x00\x00\x00\xd6\xff\xff\xff\x0c\x00\x00\x00\x1c\x00\x00\x00\x03\x00\x00'
        b'\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x01\x00\x00\x00B\x00\n\x00\x10\x00\x0c\x00\x08\x00\x04\x00\n\x00\x00\x00\x0c'
        b'\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03'
        b'\x00\x00\x00\x00\x00\xc0?\x01\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00'
    ),
    DumpTestCase(
        vertex_names={1: 'A', 2: 'A', 3: 'B'},
        edges={
            1: [
                {'from_id': 1, 'to_id': 2, 'cost': 0.0, 'accessible': True},
                {'from_id': 1, 'to_id': 3, 'cost': 1.0, 'accessible': False},
            ],
            2: [
                {'from_id': 2, 'to_id': 1, 'cost': 0.0, 'accessible': True},
                {'from_id': 2, 'to_id': 3, 'cost': 2.0, 'accessible': False},
            ],
            3: []
        },
        graph_fb=b'\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04\x00'
        b'\x00\x00\x03\x00\x00\x00l\x00\x00\x00$\x00\x00\x00\x04\x00\x00\x00\xaa\xff\xff\xff'
        b'\x0c\x00\x00\x00\x0c\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00B'
        b'\x00\x00\x00\xc6\xff\xff\xff\x0c\x00\x00\x00,\x00\x00\x00\x02\x00\x00\x00\x02\x00'
        b'\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00'
        b'\x00\x00\x03\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00A\x00\n\x00'
        b'\x10\x00\x0c\x00\x08\x00\x04\x00\n\x00\x00\x00\x0c\x00\x00\x00,\x00\x00\x00\x01\x00'
        b'\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00'
        b'\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x01\x00\x00'
        b'\x00A\x00\x00\x00'
    ),
    DumpTestCase(
        vertex_names={10: 'A', -20: 'B', 30: 'C', -40: 'D'},
        edges={
            10: [
                {'from_id': 10, 'to_id': -20, 'cost': 1.0, 'accessible': False},
                {'from_id': 10, 'to_id': 30, 'cost': 0.0, 'accessible': False},
                {'from_id': 10, 'to_id': -40, 'cost': 1.0, 'accessible': True},
            ],
            -20: [
                {'from_id': -20, 'to_id': 30, 'cost': 0.0, 'accessible': True},
            ],
            30: [
                {'from_id': 30, 'to_id': -40, 'cost': 1.0, 'accessible': False},
            ],
            -40: [
                {'from_id': -40, 'to_id': -20, 'cost': 0.0, 'accessible': False},
            ],
        },
        graph_fb=b'\x0c\x00\x00\x00\x00\x00\x06\x00\x08\x00\x04\x00\x06\x00\x00\x00\x04\x00'
        b'\x00\x00\x04\x00\x00\x00\xbc\x00\x00\x00\x84\x00\x00\x004\x00\x00\x00\x04\x00\x00'
        b'\x00^\xff\xff\xff\x0c\x00\x00\x00\x1c\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00'
        b'\x1e\x00\x00\x00\xd8\xff\xff\xff\x00\x00\x80?\x00\x00\x00\x00\x01\x00\x00\x00C\x00'
        b'\x00\x00\x8a\xff\xff\xff\x0c\x00\x00\x00<\x00\x00\x00\n\x00\x00\x00\x03\x00\x00'
        b'\x00\n\x00\x00\x00\xec\xff\xff\xff\x00\x00\x80?\x00\x00\x00\x00\n\x00\x00\x00\x1e'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\xd8\xff\xff\xff\x00\x00'
        b'\x80?\x01\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00\xd6\xff\xff\xff\x0c\x00\x00\x00'
        b'\x1c\x00\x00\x00\xec\xff\xff\xff\x01\x00\x00\x00\xec\xff\xff\xff\x1e\x00\x00\x00'
        b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00B\x00\n\x00\x10\x00\x0c\x00\x08\x00'
        b'\x04\x00\n\x00\x00\x00\x0c\x00\x00\x00\x1c\x00\x00\x00\xd8\xff\xff\xff\x01\x00\x00'
        b'\x00\xd8\xff\xff\xff\xec\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
        b'\x00D\x00\x00\x00'
    )
]


class TestClass:
    @classmethod
    def setup_class(cls) -> None:
        subprocess.run('ls -lh /usr/local/bin/flatc', shell=True, check=True)
        subprocess.run('/usr/local/bin/flatc --python schema.fbs', shell=True, check=True)

        # Note this huck needed to correctly import generated code during testing in our system
        # Patching sys.path is a bad practice
        sys.path.append(str(Path(__file__).parent))

    @pytest.mark.parametrize('case', LOAD_TEST_CASES)
    def test_load(self, case: LoadTestCase) -> None:
        from .schema_parser import Graph  # noqa

        graph = Graph()
        graph.loadb(case.graph_fb)
        assert graph.dumps() == case.graph_str

    @pytest.mark.parametrize('case', DUMP_TEST_CASES)
    def test_dump(self, case: DumpTestCase) -> None:
        from .schema_parser import Edge, Graph  # noqa

        graph = Graph()

        edges: tp.Dict[int, tp.List[Edge]] = {}
        for vid, v_edges in case.edges.items():
            edges[vid] = [Edge(**edge_kwargs) for edge_kwargs in v_edges]
        graph.set_graph(case.vertex_names, edges)

        assert graph.dumpb() == case.graph_fb
